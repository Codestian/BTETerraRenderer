buildscript {
    repositories {
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            name = 'Sponge Mixin'
            url = 'https://repo.spongepowered.org/maven'
        }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath ('net.minecraftforge.gradle:ForgeGradle:6.0.+') { changing = true }
		classpath 'com.github.johnrengelman:shadow:8.1.1'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

subprojects { p ->

    def isCoreSubProject = p == project(':core')
    def isForgeSubProject = project.name.startsWith('forge')
    def isFabricSubProject = project.name.startsWith('fabric')

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        shadowDep
        compileAndTestOnly

        implementation.extendsFrom shadowDep
        compileOnly.extendsFrom compileAndTestOnly
        testImplementation.extendsFrom compileAndTestOnly
    }

    dependencies {
        shadowDep 'org.osgeo:proj4j:0.1.0'
        shadowDep 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2'
        shadowDep 'de.javagl:jgltf-impl-v2:2.0.3'
        shadowDep 'de.javagl:jgltf-model:2.0.3'
        shadowDep("net.daporkchop.lib:binary:0.5.7-SNAPSHOT") { exclude group: "io.netty" } // T++
        if(p != project(':forge1.12.2')) {
            shadowDep 'lzma:lzma:0.0.1'
        }

        compileOnly 'commons-codec:commons-codec:1.16.0' // T++
        compileOnly 'org.apache.logging.log4j:log4j-core:2.20.0'
        compileAndTestOnly 'com.google.guava:guava:31.1-jre' // T++
        compileAndTestOnly 'io.netty:netty-all:4.1.9.Final' // T++
        compileAndTestOnly 'lzma:lzma:0.0.1' // T++

        compileOnly 'org.projectlombok:lombok:1.18.26'
        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testImplementation 'org.apache.logging.log4j:log4j-core:2.20.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        testRuntimeOnly 'junit:junit:4.13.2'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        def resourceTargets = [
                'mcmod.info', // Forge < 1.13?
                'META-INF/mods.toml', // Forge >= 1.13?
                'fabric.mod.json' // Fabric
        ]
        def intoTargets = [ "$buildDir/resources/main/" ]

        def replaceProperties = [
                version:    rootProject.modVersion,
                mcversion:  project.minecraftVersion
        ]

        inputs.properties replaceProperties
        filesMatching(resourceTargets) {
            expand replaceProperties
        }
        intoTargets.each { target ->
            if(!file(target).exists()) return
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }

    shadowJar {
        configurations = [ project.configurations.shadowDep ]

        def librariesLocation = "${project.modGroup}.${project.modId}.dep"
        relocate 'com.fasterxml.jackson',   "${librariesLocation}.jackson"
        relocate 'de.javagl.jgltf',         "${librariesLocation}.jgltf"
        relocate 'net.daporkchop.lib',      "${librariesLocation}.porklib"
        relocate 'org.osgeo.proj4j',        "${librariesLocation}.proj4j"
        relocate 'org.yaml.snakeyaml',      "${librariesLocation}.snakeyaml"

        archiveClassifier.set(null)
        exclude '**/module-info.class'
    }
    build.dependsOn shadowJar
}

allprojects { p ->

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    version = "${rootProject.modVersion}-${project.name}"
    group = rootProject.modGroup
    archivesBaseName = rootProject.modId

    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()

        // lzma
        maven { url "https://repo.spongepowered.org/maven/" }

        // For leveldb
        maven { url "https://maven.daporkchop.net/" }
        maven { url "https://repo.opencollab.dev/snapshot/" }

        // Jitpack; For cubicchunks, cubicworldgen, terraplusplus
        maven { url "https://jitpack.io/" }

        // Elytradev; For jankson
        maven { url "https://repo.elytradev.com/" }
    }

}